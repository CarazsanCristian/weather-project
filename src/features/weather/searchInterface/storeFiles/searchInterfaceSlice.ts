import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';
import { getCityByNameAndUnits } from "./SearchInterfaceApi"

export interface CityDataInterface {
    country: String,
    name: String,
    weather: {
        temperature: {
            actual: Number,
            feelsLike: Number,
            min: Number,
            max: Number
        },
        summary: {
            title: String,
            description: String,
        },
        wind: {
            speed: Number,
            deg: Number,
        },
        clouds: {
            all: Number,
            visibility: Number,
            humidity: Number,
        }
    }
}
function emptyCityData(): CityDataInterface {
    return {
        country: '-',
        name: '-',
        weather: {
            temperature: {
                actual: 0,
                feelsLike: 0,
                min: 0,
                max: 0
            },
            summary: {
                title: '-',
                description: '-',
            },
            wind: {
                speed: 0,
                deg: 0,
            },
            clouds: {
                all: 0,
                visibility: 0,
                humidity: 0,
            }
        }
    }
}

export interface SearchInterfaceState {
    value: number;
    cityData: CityDataInterface;
    status: 'idle' | 'loading' | 'failed';
}

const initialState: SearchInterfaceState = {
    value: 0,
    cityData: emptyCityData(),
    status: 'idle',
};


export const updateCityData = createAsyncThunk(
    'searchInterface/getCityByNameAndUnits',
    async (city: { name: String, units: String }) => {
        const response = await getCityByNameAndUnits(city.name, city.units);
        // The value we return becomes the `fulfilled` action payload
        return response.data;

    }
);

export const searchInterfaceSlice = createSlice({
    name: 'searchInterface',
    initialState,
    // The `reducers` field lets us define reducers and generate associated actions
    reducers: {

    },
    // The `extraReducers` field lets the slice handle actions defined elsewhere,
    // including actions generated by createAsyncThunk or in other slices.
    extraReducers: (builder) => {
        builder
            .addCase(updateCityData.pending, (state) => {
                state.status = 'loading';
            })
            .addCase(updateCityData.fulfilled, (state, action: PayloadAction<CityDataInterface>) => {
                if (!action.payload) {
                    state.status = 'failed';
                    state.cityData = emptyCityData()
                } else {
                    state.status = 'idle';
                    state.cityData = action.payload

                }
            });
    },
});

export default searchInterfaceSlice.reducer;
